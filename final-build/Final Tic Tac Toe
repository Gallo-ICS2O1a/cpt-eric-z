grid_layoutp1 = []
grid_layoutp2 = []
grid_layout = []
for blocks in range(3):
    grid_layoutp1.append([0]*3)
for blocks in range(3):
    grid_layoutp2.append([0]*3)
for blocks in range(3):
    grid_layout.append([0]*3)
win = False
tie = False
game_end = False
breakout = False
can_place = True
player = 1


def setup():
    size(600, 700)
 

def draw():
    global game_end
    global win
    global player
    global tie
    background(178, 24, 67)
    fill(225)
    rect(180, 100, 40, 900)
    rect(380, 100, 40, 900)
    rect(0, 280, 900, 40)
    rect(0, 480, 900, 40)
    fill(255, 8, 78)
    rect(190, 100, 20, 900)
    rect(390, 100, 20, 900)
    rect(0, 290, 900, 20)
    rect(0, 490, 900, 20)
    fill(15, 140, 178)
    rect(0, 0, 600, 100)
    
    print(game_end)
    print(grid_layoutp1)
    print(grid_layoutp2)
    print(grid_layout)
    make_board()
    
    if game_end is False:
        if player == 2:
            check_win1()
            check_tie()
        if player == 1:
            check_win2()
            check_tie()
        if win is False and tie is False:
            fill(15, 140, 178)
            rect(0, 0, 600, 100)
            textSize(32)
            fill(255)
            text("Player " + str(player) + "'s Turn", 10, 50)
    
        else:
            if player == 2:
                player = 1
            else:
                player = 2
            game_end = True
            if win is True:
                fill(15, 140, 178)
                rect(0, 0, 600, 100)
                textSize(32)
                fill(255)
                text("Player " + str(player) + " Has Won", 10, 50)
                print("win")
            elif tie is True:
                fill(15, 140, 178)
                rect(0, 0, 600, 100)
                textSize(32)
                fill(255)
                text("Game is a tie", 10, 50)
                print("tie")

    elif game_end is True:
        if win is True:
            fill(15, 140, 178)
            rect(0, 0, 600, 100)
            textSize(32)
            fill(255)
            text("Player " + str(player) + " Has Won", 10, 50)
            print("win")
            fill(15, 140, 178)
        elif tie is True:
            fill(15, 140, 178)
            rect(0, 0, 600, 100)
            textSize(32)
            fill(255)
            text("Game is a tie", 10, 50)
            print("tie")
        fill(15, 140, 178)
        rect(225, 325, 150, 150)
        fill(255)
        textSize(23)
        text("Press DOWN", 232, 370)
        textSize(32)
        text("To play", 250, 410)
        text("Again", 260, 450)
        
    textSize(32)
    fill(255)
    text("Tic Tac Toe", 400, 50)    


def check_win1():
    global grid_layoutp1
    global win
    if grid_layoutp1[0][0] == 1 and grid_layoutp1[1][0] == 1 and \
    grid_layoutp1[2][0] == 1:
        win = True
    elif grid_layoutp1[0][1] == 1 and grid_layoutp1[1][1] == 1 and \
    grid_layoutp1[2][1] == 1:
        win = True
    elif grid_layoutp1[0][2] == 1 and grid_layoutp1[1][2] == 1 and \
    grid_layoutp1[2][2] == 1:
        win = True
    elif grid_layoutp1[0][0] == 1 and grid_layoutp1[0][1] == 1 and \
    grid_layoutp1[0][2] == 1:
        win = True
    elif grid_layoutp1[1][0] == 1 and grid_layoutp1[1][1] == 1 and \
    grid_layoutp1[1][2] == 1:
        win = True
    elif grid_layoutp1[2][0] == 1 and grid_layoutp1[2][1] == 1 and \
    grid_layoutp1[2][2] == 1:
        win = True
    elif grid_layoutp1[0][0] == 1 and grid_layoutp1[1][1] == 1 and \
    grid_layoutp1[2][2] == 1:
        win = True
    elif grid_layoutp1[0][2] == 1 and grid_layoutp1[1][1] == 1 and \
    grid_layoutp1[2][0] == 1:
        win = True


def check_win2():
    global grid_layoutp2
    global win
    if grid_layoutp2[0][0] == 1 and grid_layoutp2[1][0] == 1 and \
    grid_layoutp2[2][0] == 1:
        win = True
    elif grid_layoutp2[0][1] == 1 and grid_layoutp2[1][1] == 1 and \
    grid_layoutp2[2][1] == 1:
        win = True
    elif grid_layoutp2[0][2] == 1 and grid_layoutp2[1][2] == 1 and \
    grid_layoutp2[2][2] == 1:
        win = True
    elif grid_layoutp2[0][0] == 1 and grid_layoutp2[0][1] == 1 and \
    grid_layoutp2[0][2] == 1:
        win = True
    elif grid_layoutp2[1][0] == 1 and grid_layoutp2[1][1] == 1 and \
    grid_layoutp2[1][2] == 1:
        win = True
    elif grid_layoutp2[2][0] == 1 and grid_layoutp2[2][1] == 1 and \
    grid_layoutp2[2][2] == 1:
        win = True
    elif grid_layoutp2[0][0] == 1 and grid_layoutp2[1][1] == 1 and \
    grid_layoutp2[2][2] == 1:
        win = True
    elif grid_layoutp2[0][2] == 1 and grid_layoutp2[1][1] == 1 and \
    grid_layoutp2[2][0] == 1:
        win = True


def mousePressed():
    global player
    global grid_layout
    global grid_layoutp1
    global grid_layoutp2
    global can_place
    
    if game_end is False:

        if mouseX < 200 and mouseY < 300 and mouseY > 100:
            if grid_layout[0][0] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(100, 200, 50, 50)
                if player == 1:
                    grid_layoutp1[0][0] = 1
                elif player == 2:
                    grid_layoutp2[0][0] = 1
        elif mouseX < 200 and mouseY > 300 and mouseY < 500:
            if grid_layout[1][0] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(100, 400, 50, 50)
                if player == 1:
                    grid_layoutp1[1][0] = 1
                elif player == 2:
                    grid_layoutp2[1][0] = 1
        elif mouseX < 200 and mouseY > 500:
            if grid_layout[2][0] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(100, 600, 50, 50)
                if player == 1:
                    grid_layoutp1[2][0] = 1
                elif player == 2:
                    grid_layoutp2[2][0] = 1
        elif mouseX > 200 and mouseX < 400 and mouseY < 300 and mouseY > 100:
            if grid_layout[0][1] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(300, 200, 50, 50)
                if player == 1:
                    grid_layoutp1[0][1] = 1
                elif player == 2:
                    grid_layoutp2[0][1] = 1
        elif mouseX > 200 and mouseX < 400 and mouseY > 300 and mouseY < 500:
            if grid_layout[1][1] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(300, 400, 50, 50)
                if player == 1:
                    grid_layoutp1[1][1] = 1
                elif player == 2:
                    grid_layoutp2[1][1] = 1
        elif mouseX > 200 and mouseX < 400 and mouseY > 500:
            if grid_layout[2][1] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(300, 600, 50, 50)
                if player == 1:
                    grid_layoutp1[2][1] = 1
                elif player == 2:
                    grid_layoutp2[2][1] = 1 
        elif mouseX > 400 and mouseY < 300 and mouseY > 100:
            if grid_layout[0][2] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(500, 200, 50, 50)
                if player == 1:
                    grid_layoutp1[0][2] = 1
                elif player == 2:
                    grid_layoutp2[0][2] = 1
        elif mouseX > 400 and mouseY > 300 and mouseY < 500:
            if grid_layout[1][2] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(500, 400, 50, 50)
                if player == 1:
                    grid_layoutp1[1][2] = 1
                elif player == 2:
                    grid_layoutp2[1][2] = 1
        elif mouseX > 400 and mouseY > 500:
            if grid_layout[2][2] == 1:
                can_place = False
                print("can't place there")
            else:
                ellipse(500, 600, 50, 50)
                if player == 1:
                    grid_layoutp1[2][2] = 1
                elif player == 2:
                    grid_layoutp2[2][2] = 1
        
        if can_place is True:
            if player == 1:
                player = 2
            else:
                player = 1
        else:
            can_place = True
            

def make_board():
    global grid_layout
    global grid_layoutp1
    global grid_layoutp2    
    for row in range(3):
        for col in range(3):
            if grid_layoutp1[row][col] == 1:
                grid_layout[row][col] = grid_layoutp1[row][col]
                fill(255, 239, 34)
                ellipse((col*200+100), (row*200+200), 70, 70)
            elif grid_layoutp2[row][col] == 1:
                grid_layout[row][col] = grid_layoutp2[row][col]
                fill(27, 162, 204)
                ellipse((col*200+100), (row*200+200), 70, 70)


def init():
    global game_end
    global win
    global tie
    global breakout
    for row in range(3):
        for col in range(3):
            grid_layout[row][col] = 0
            grid_layoutp1[row][col] = 0
            grid_layoutp2[row][col] = 0
    win = False
    tie = False
    breakout = False
    game_end = False
    player = 1


def keyPressed():
    if key == CODED:
        if keyCode == DOWN:
            init()
 
            
def check_tie():
    global tie
    global game_end
    global win
    global breakout
    if win is False:
        move_counter = 0
        breakout = True
        for row in range(3):
            for col in range(3):
                if grid_layout[row][col] == 1:
                    move_counter = move_counter + 1
                if move_counter >= 9:
                    tie = True
