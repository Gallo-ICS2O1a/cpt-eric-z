import copy
grid_layout = []
for blocks in range(24):
    grid_layout.append([0]*18)
landed = []
for blocks in range(24):
    grid_layout.append([0]*18)
locationx = int(random(0,15))
row_pos = 0
gridcheckindex = 1
grid_dimensions = 3
has_coll = False
bigCol = True
finished_fall = False
can_movedown = True
fallingshaperef = []
fallingshape_i = [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]]
fallingshape_t = [[0,1,0],[1,1,1],[0,0,0]]
fallingshape_j = [[0,0,1],[1,1,1],[0,0,0]]
fallingshape = [[1,0,0],[1,1,1],[0,0,0]]
fallingshape_s = [[0,1,1],[1,1,0],[0,0,0]]
fallingshape_z = [[1,1,0],[0,1,1],[0,0,0]]
fallingshape_o = [[1,1,0],[1,1,0],[0,0,0]]
fallingshape_loc = [row_pos, locationx]
for row in range(23,24):
    for column in range(18):
        grid_layout[row][column] = 1      
x = 150
y = 50
#row = 24
#column = 18

def setup():
    size(600,700)
    frameRate(5)
    

    
    
def draw():
    global x
    global y
    global row
    global column
    global row_pos
    global locationx
    global columnindex
    global fallingshape
    global fallingshaperef
    global gridcheckindex
    global grid_dimensions
    background(255)
    
    if gridcheckindex == 0:
        if fallingshape == [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]]:
            grid_dimensions = 4
            gridcheckindex = 1
        elif gridcheckindex == 1:
            grid_dimensions = 3
            gridcheckindex = 1
            
    

    shape_fall()
    
  

    draw_shape()
    
    clear_grid()
    
    


                    
                                                    


def keyPressed():
    global fallingshape
    
    if key == CODED:
        if keyCode == UP:
            shape_rotate()
        if keyCode == RIGHT:
            shape_translateR()
        if keyCode == LEFT:
            shape_translateL()
        if keyCode == DOWN:
            shape_translateD()
            
def shape_fall():
    global row_pos
    global locationx
    global grid_dimensions
    
    print( "before fall" )
    for row in range(row_pos + grid_dimensions, row_pos, -1):
        for col in range(locationx, locationx + grid_dimensions):
            grid_layout[row+1][col] = fallingshape[row - row_pos - 1][ col-locationx]
    row_pos = row_pos + 1        
    
        
    print( "after fall" )


def shape_rotate():
    global fallingshape
    if not(fallingshape == [[1,1,0],[1,1,0],[0,0,0]]):
        fallingshape = list(zip(*fallingshape[::-1]))

def shape_translateR():
    global row_pos
    global locationx
    global grid_dimensions
    
    # print( "before R" )
    # for col in range(locationx + grid_dimensions, locationx, -1):
    #     for row in range(row_pos, row_pos + grid_dimensions):
    #         grid_layout[row][col+1] = fallingshape[row - row_pos][col-locationx-1]
    #         grid_layout[row][col] = 0
    locationx = locationx + 1 
    print( "afer R" )

def shape_translateL():
    global locationx
    locationx = locationx - 1
    
def shape_translateD():
    global row_pos
    
    row_pos = row_pos + 1
    
def draw_shape():
    global x
    global y
    global grid_layout
    for i, horizontal in enumerate(grid_layout):
        for j, cell_value in enumerate(horizontal):
            if cell_value == 0:
                fill(255)
            if cell_value == 1:
                fill(0)
            rect(x + j*25, y + i*25, 25, 25)
            
def draw_landed():
    for i, horizontal in enumerate(landed):
        for j, cell_value in enumerate(horizontal):
            if cell_value == 0:
                fill(255)
            if cell_value == 1:
                fill(0)
            

def clear_grid():
    for row in range(24):
        for column in range(18):
            grid_layout[row][column] = 0
            

def posof_1():
    for row in range(grid_dimensions, 0, -1):
        for col in range(grid_dimensions):
            if fallingshape[row-1][col] == 1:
                can_movedown = False
            else:
                can_movedown = True
        if can_movedown == True:
            for row in range(grid_dimensions - 1 , 0, -1):
                for col in range(grid_dimensions):
                    fallingshape[row][col] = fallingshape[row - 1][col]
                    
                
                
def collision_detection():
for column in range(locationx, locationx + grid_dimensions):
    if landed[row_pos + grid_dimensions][locationx] = 0:
        bigColl = True
            
            
    
    
    
    
    
                
    
 
        
   
