import copy 
grid_layout = []
for blocks in range(24):
    grid_layout.append([0]*18)
landed = []
for blocks in range(24):
    landed.append([0]*18)
locationx = int(random(0,15))
row_pos = 0
gridcheckindex = 0
grid_dimensions = 3
has_coll = False
bigCol = True
finished_fall = False
can_movedown = True
breakout = False
fallingshaperef = []
fallingshape_i = [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]]
fallingshape_t = [[0,1,0],[1,1,1],[0,0,0]]
fallingshape_j = [[0,0,1],[1,1,1],[0,0,0]]
fallingshape_l = [[1,0,0],[1,1,1],[0,0,0]]
fallingshape_s = [[0,1,1],[1,1,0],[0,0,0]]
fallingshape_z = [[1,1,0],[0,1,1],[0,0,0]]
fallingshape_o = [[1,1,0],[1,1,0],[0,0,0]]
choices = [fallingshape_i, fallingshape_t, fallingshape_j, fallingshape_l, fallingshape_s, fallingshape_z, fallingshape_o]
fallingshape_loc = [row_pos, locationx]
for row in range(23,24):
    for column in range(18):
        landed[row][column] = 1      
x = 150
y = 50
#row = 24
#column = 18

def setup():
    size(600,700)
    frameRate(5)
    

    
    
def draw():
    global x
    global y
    global row
    global column
    global row_pos
    global locationx
    global fallingshape
    global fallingshaperef
    global gridcheckindex
    global grid_dimensions
    background(255)
    
    if gridcheckindex == 0:
        rand_shape()
        print("complete2")
        if fallingshape == [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]]:
            grid_dimensions = 4
            gridcheckindex = 1
        else:
            grid_dimensions = 3
            gridcheckindex = 1
            
    #posof_1()
    

    shape_fall()
    
    posof_1()
  
    draw_landed()
    draw_shape()
    
    #clear_grid()
    
    
    
    #draw_landed()
    

    
    


                    
                                                    


def keyPressed():
    global fallingshape
    
    if key == CODED:
        if keyCode == UP:
            shape_rotate()
        if keyCode == RIGHT:
            shape_translateR()
        if keyCode == LEFT:
            shape_translateL()
        if keyCode == DOWN:
            shape_translateD()
            
def shape_fall():
    global row_pos
    global locationx
    global grid_dimensions
    global can_movedown
    global gridcheckindex
    
    #print( "before fall" )
    print ("shape fall ",can_movedown)
    if can_movedown == True:
        for row in range(row_pos + grid_dimensions, row_pos, -1):
            for col in range(locationx, locationx + grid_dimensions):
                #grid_layout[row][col] = fallingshape[row-row_pos-1][col-locationx]
                #if fallingshape[row - row_pos - 1][ col-locationx] == 1:
                grid_layout[row+1][col] = fallingshape[row - row_pos - 1][ col-locationx]
                grid_layout[row][col] = 0
        row_pos = row_pos + 1
    else:
        for row in range(row_pos + grid_dimensions, row_pos, -1):
            for col in range(locationx, locationx + grid_dimensions):
                #if fallingshape[row - row_pos - 1][ col-locationx] == 1:
                    #for row in range(row_pos + grid_dimensions, row_pos, -1):
                        #for col in range(locationx, locationx + grid_dimensions):
                if grid_layout[row][col] == 1:
                    landed[row][col] = grid_layout[row][col]
                    grid_layout[row][col] = 0
                    
        
        gridcheckindex = 0
        row_pos = 0
        can_movedown = True
        print("complete")
                
                                
                        
                                
                    #landed[row][col] = grid_layout[row][col]  #NEED TO!!!!!!!!!!!!!!!!!!!!!!!!!!deep_copy
                    
      
    
    
    
        
    #print( "after fall" )


def shape_rotate():
    global fallingshape
    if not(fallingshape == [[1,1,0],[1,1,0],[0,0,0]]):
        fallingshape = list(zip(*fallingshape[::-1]))

def shape_translateR():
    global row_pos
    global locationx
    global grid_dimensions
    
    # print( "before R" )
    # for col in range(locationx + grid_dimensions, locationx, -1):
    #     for row in range(row_pos, row_pos + grid_dimensions):
    #         grid_layout[row][col+1] = fallingshape[row - row_pos][col-locationx-1]
    #         grid_layout[row][col] = 0
    if locationx != 18 - grid_dimensions:
        locationx = locationx + 1
        for row in range(row_pos + grid_dimensions):
            grid_layout[row][locationx-1] = 0
        #grid_layout[row_pos][locationx-1] = 0
        #grid_layout[row_pos+1][locationx-1] = 0
        #grid_layout[row_pos+2][locationx-1] = 0
    print( "afer R" )

def shape_translateL():
    global locationx
    if locationx != 0:
        locationx = locationx - 1
        for row in range(row_pos + grid_dimensions):
            grid_layout[row][locationx+grid_dimensions] = 0
    
def shape_translateD():
    global row_pos
    
    row_pos = row_pos + 1
    
def draw_shape():
    global x
    global y
    global grid_layout
    for i, horizontal in enumerate(grid_layout):
        for j, cell_value in enumerate(horizontal):
            #if cell_value == 0:
                #fill(255)
            if cell_value == 1:
                fill(0)
                rect(x + j*25, y + i*25, 25, 25)
            #draw shape based on where in graph
            
def draw_landed():
    global x
    global y
    global landed
    for i, horizontal in enumerate(landed):
        for j, cell_value in enumerate(horizontal):
            if cell_value == 0:
                fill(255)
            if cell_value == 1:
                fill(0)
            rect(x + j*25, y + i*25, 25, 25)
            

def clear_grid():
    for row in range(24):
        for column in range(18):
            grid_layout[row][column] = 0
            

def posof_1():
    global can_movedown
    global breakout
    for row in range(row_pos, row_pos + grid_dimensions):
        for col in range(locationx, locationx + grid_dimensions):
            if row + 1 <= 22:
                if grid_layout[row][col]== 1:
                    if landed[row+1][col] == 0:
                        can_movedown = True
                    else:
                        can_movedown = False
                        breakout = True
                        break
            else:
                can_movedown = False
                breakout = True
                break
        
        if breakout == True:
            break
    print("col detect ",can_movedown)
                

   
    
    
        #if can_movedown == True:
            #for row in range(grid_dimensions - 1 , 0, -1):
                #for col in range(grid_dimensions):
                    #fallingshape[row][col] = fallingshape[row - 1][col]
                    
                
                
def collision_detection():
    for column in range(locationx, locationx + grid_dimensions):
        if landed[row_pos + grid_dimensions][locationx] == 0:
            bigColl = True

def remove_lines():
    for row in range(24):
        if landed[row][0] == 1 and landed[row][1] == 1 and landed[row][2] == 1 and landed[row][3] == 1 and landed[row][4] == 1 and landed[row][5] == 1 and landed[row][6] == 1 and landed[row][7] == 1 and landed[row][8] == 1 and landed[row][9] == 1 and landed[row][10] == 1 and landed[row][11] == 1 and landed[row][12] == 1 and landed[row][13] == 1 and landed[row][14] == 1 and landed[row][15] == 1 and landed[row][16] == 1 and landed[row][17] == 1 and landed[row][18] == 1:
            clearline = True
        if clearline == True: 
            landed.pop(row-1)
    #append a row of zeros at top of array
    
    
def rand_shape():
    import random
    global fallingshape
    global choices
    #piece_gen = int(random(0,7))
    init_piece = random.choice(choices)
    fallingshape = [row[:] for row in init_piece]
    print("complete3")
    print(fallingshape)
